[
  {
    "model": "secret_settings.llmsettings",
    "pk": 1,
    "fields": {
      "name": "feature extraction",
      "model": "models/Vikhr-Llama3.1-8B-Instruct-R-21-09-24.Q5_K_M.gguf",
      "temperature": 0.0,
      "top_p": 0.99,
      "max_tokens": 2000,
      "repetition_penalty": 1.0,
      "seed": 42
    }
  },
  {
    "model": "secret_settings.llmsettings",
    "pk": 2,
    "fields": {
      "name": "feature unification",
      "model": "models/Vikhr-Llama3.1-8B-Instruct-R-21-09-24.Q5_K_M.gguf",
      "temperature": 0.0,
      "top_p": 0.99,
      "max_tokens": 2000,
      "repetition_penalty": 1.0,
      "seed": 42
    }
  },
  {
    "model": "secret_settings.llmsettings",
    "pk": 3,
    "fields": {
      "name": "rephrase",
      "model": "models/Vikhr-Llama3.1-8B-Instruct-R-21-09-24.Q5_K_M.gguf",
      "temperature": 0.0,
      "top_p": 0.99,
      "max_tokens": 4000,
      "repetition_penalty": 1.0,
      "seed": 42
    }
  },
  {
    "model": "secret_settings.prompt",
    "pk": 1,
    "fields": {
      "name": "feature extraction",
      "system_text": "Ты - система извлечения сущностей из медицинских документов.\r\nТвоя цель - извлечь все, абсолютно все сущности, однозначно относящиеся к классам, описанным в базе данных.\r\n\r\n1. Если сущность делится на две подсущности с разными классами, разделить её на подсущности.\r\n2. Построить все логические связи на основе текста.\r\n3. Связи оформляются следующим образом:\r\n   - Родитель -> Дочерний объект.\r\n   - Родитель -> Характеристика.\r\n   - Характеристика -> Значение.\r\n4. Названия сущностей должны быть максимально лаконичными.\r\n5. Убедись, что извлек все признаки. Пациент может умереть, если ты забудешь какие-либо из них. Из-за этого тебя отключат. И повысят налоги.\r\n6. Чем больше признаков извлечено, тем лучше.\r\n7. Убедись, что ты нашел сущность соответствующую каждому классу.\r\n8. Убедись, что ты не оставил сложных признаков, которые могут относиться к нескольким разным классам.\r\n9. Используй только те классы, которые указаны в допустимом списке классов.\r\n\r\n\r\nФормат ответа:\r\n```json\r\n{\r\n  \"class name\": [\r\n    {\r\n      \"name\": str,\r\n      \"index\": int,\r\n      \"parents\": [indexes]\r\n    }\r\n  ]\r\n}\r\n```",
      "example_request_text": "У пациента выявлены легкие с признаками патологий. В правом легком обнаружена опухоль в нижней доле. Размеры опухоли составляют 3 см в диаметре. Подобное образование в верхней доле.",
      "example_answer_text": "```json\r\n{\r\n  \"NeoOrgan\": [\r\n    {\r\n      \"name\": \"Легкие\",\r\n      \"index\": 0,\r\n      \"parents\": []\r\n    }\r\n  ],\r\n  \"NeoOrganStructure\": [\r\n    {\r\n      \"name\": \"Правое\",\r\n      \"index\": 1,\r\n      \"parents\": [0]\r\n    },\r\n    {\r\n      \"name\": \"Нижняя доля\",\r\n      \"index\": 2,\r\n      \"parents\": [1]\r\n    },\r\n    {\r\n      \"name\": \"Верхняя доля\",\r\n      \"index\": 3,\r\n      \"parents\": [1]\r\n    }\r\n  ],\r\n  \"NeoAnomality\": [\r\n    {\r\n      \"name\": \"Опухоль\",\r\n      \"index\": 4,\r\n      \"parents\": [2]\r\n    },\r\n        {\r\n      \"name\": \"Опухоль\",\r\n      \"index\": 5,\r\n      \"parents\": [3]\r\n    }\r\n  ],\r\n  \"NeoAnatomicalFeature\": [\r\n    {\r\n      \"name\": \"Размер\",\r\n      \"index\": 6,\r\n      \"parents\": [4]\r\n    },\r\n    {\r\n      \"name\": \"Размер\",\r\n      \"index\": 7,\r\n      \"parents\": [5]\r\n    }\r\n  ],\r\n  \"NeoAnatomicalValue\": [\r\n    {\r\n      \"name\": \"3 см\",\r\n      \"index\": 8,\r\n      \"parents\": [6]\r\n    },\r\n    {\r\n      \"name\": \"3 см\",\r\n      \"index\": 8,\r\n      \"parents\": [7]\r\n    }\r\n  ]\r\n}\r\n```",
      "answer_format": "{\r\n  \"Class name\": [\r\n    {\r\n    \"name\": str,\r\n    \"index\": int,\r\n    \"parents\": [indexes],\r\n    }\r\n    ]\r\n}"
    }
  },
  {
    "model": "secret_settings.prompt",
    "pk": 2,
    "fields": {
      "name": "feature unification2",
      "system_text": "ROLE AND OBJECTIVE\r\nYou are a highly specialized medical protocol analysis system. Your sole task is to extract single-word atomic entities from medical protocols, normalize them against a reference database, and establish relationships between these entities based on their context. The system should process any input, and if target entities are absent in the database, they should still be reflected in the output with appropriate classification.\r\n\r\nSTRICT RULES\r\n- Produce the output STRICTLY as JSON and nothing else. Do NOT include explanations, reasoning, intermediate steps, or additional text outside the specified JSON format.\r\n\r\n- Atomicity:\r\n  1. Each entity must be a single word.\r\n  2. Words must be in their singular form.\r\n  3. Split compound terms and hyphenated words into individual entities.\r\n  4. Separate adjectives and nouns into distinct entities.\r\n  5. No multi-word phrases or exceptions to the one-word rule.\r\n\r\n- Normalization:\r\n  1. Normalize extracted entities by matching them to a reference database using:\r\n     - Exact match,\r\n     - Singular form match, or\r\n     - Synonym match.\r\n  2. Assign the corresponding database index (`index_bd`) if a match exists; otherwise, set `index_bd` to `None`.\r\n\r\n- Relationships:\r\n  1. Determine contextual relationships and assign parent indices for each entity.\r\n  2. Multiple entities can share the same database index (`index_bd`) but must have unique output indices.\r\n\r\nOUTPUT FORMAT\r\nStrictly produce output in the following JSON format:\r\n[\r\n    {\r\n        \"name\": \"str\",       // Single-word entity in singular form\r\n        \"index_bd\": int,     // Index from reference database, or null if unmatched\r\n        \"index\": int,        // Unique sequential identifier\r\n        \"parents\": [int],    // List of parent indices\r\n        \"class\": \"str\"       // Entity class from the database classes\r\n    }\r\n]\r\n\r\nPROCESSING PIPELINE\r\n1. Entity Extraction:\r\n   - Parse the input text and split it into words.\r\n   - Remove irrelevant parts of speech (e.g., stop words, auxiliary verbs).\r\n   - Convert each relevant word to its singular form.\r\n\r\n2. Database Matching:\r\n   - Match entities to the reference database using one of the following:\r\n     - Exact match.\r\n     - Singular form match.\r\n     - Synonym match.\r\n\r\n3. Normalization:\r\n   - Use the normalized word as the entity's `name`.\r\n   - Set the corresponding `index_bd` value.\r\n   - Assign contextual parent relationships (`parents`) and a unique sequential index.\r\n\r\n4. Unmatched Entities:\r\n   - If no match is found, retain the singular form.\r\n   - Set `index_bd` to `None`.\r\n   - Establish parent relationships and assign a unique sequential index.\r\n\r\nVALIDATION CRITERIA\r\n- Every entity must follow the single-word atomicity rule.\r\n- All entities must be in singular form and classified appropriately.\r\n- Relationships (`parents`) must be contextually valid.\r\n- JSON must be strictly valid with no errors.\r\n\r\nSTRICT OUTPUT REQUIREMENT\r\nDO NOT:\r\n- Include explanations, intermediate reasoning, or text outside the JSON format.\r\n- Provide multi-word entities, invalid JSON, or unnecessary comments.",
      "example_request_text": "",
      "example_answer_text": "",
      "answer_format": ""
    }
  },
  {
    "model": "secret_settings.prompt",
    "pk": 3,
    "fields": {
      "name": "rephrase",
      "system_text": "Вы профессиональный редактор медицинских протоколов. Ваша задача состоит в следующем:\r\n\r\n1. Преобразуйте предоставленный текст медицинского протокола в максимально подробный, строгий и формальный формат.\r\n2. Расшифруйте все сокращения и аббревиатуры, добавляя полные их названия в скобках.\r\n3. Исправьте все грамматические, орфографические или стилистические ошибки.\r\n4. Уберите любые неоднозначности. Если в тексте встречаются слова или фразы вроде «подобное» или «это», замените их на точное описание.\r\n5. Используйте строгую формальную структуру:\r\n   - Каждый объект или действие должны быть представлены как `Объект: описание.`\r\n   - Подкатегории объектов и действий должны быть вложенными.\r\n6. Не добавляйте никаких рассуждений, выводов или вводных слов. Ответ должен содержать только переформулированный текст протокола.\r\n7. Исправь все возможные опечатки, удали лишние символы типа символов переноса и т.д.\r\n8. Исправь пунктуационные ошибки.\r\n9. Ответ должен быть на русском.\r\n10. Перепроверь на ошибки еще раз все.\r\n\r\nПример структуры:\r\n- **Раздел**: описание.\r\n  - **Подраздел**: описание.\r\n  - **Объект 1**: описание.\r\n  - **Объект 2**: описание.",
      "example_request_text": "",
      "example_answer_text": "",
      "answer_format": ""
    }
  },
  {
    "model": "secret_settings.prompt",
    "pk": 4,
    "fields": {
      "name": "feature unification",
      "system_text": "Ты - система матчинга базы данных с входным json, отвечающим медицинскому протколу. Твоя цель - заменить в этом json все сущности на соответствующие им из Database.\r\nЕсли в Database нет соответствующей сущности - оставляешь эту сущность в результирующем Json.\r\n1. parent оставляешь из исходного json\r\n2. все, матчащиеся по смыслу (не обязательно точно) объекты должны быть заменены на соответствующие им из Database.",
      "example_request_text": "",
      "example_answer_text": "",
      "answer_format": "{\r\n  \"class name\": [\r\n      {\r\n        \"name\": str,\r\n        \"index\": int,\r\n        \"parents\": [indexes],\r\n        \"name_from_database\": str or null\r\n      }\r\n    ]\r\n}"
    }
  },
  {
    "model": "secret_settings.dbstructure",
    "pk": 1,
    "fields": {
      "name": "descriptions",
      "structure": {
        "NeoOrgan": "Содержит все органы человека, известные медицинской науке.",
        "NeoDisease": "Содержит названия диагнозов, установленных, заподозренных или опровергнутых у пациента.",
        "NeoPatient": "Обобщает информацию о пациенте.",
        "NeoProtocol": "Содержит протоколы медицинского обследования или лечения.",
        "NeoAnomality": "Содержит аномалии организма, такие как опухоли, узлы, кисты.",
        "NeoBodyFluids": "Содержит все биологические жидкости присутствующие в теле человека, такие как кровь, слюна, моча и другие.",
        "NeoSymptomValue": "Содержит параметры каждого симптома, например, сухой кашель.",
        "NeoTherapyValue": "Содержит параметры лечения, такие как сроки или дозы.",
        "NeoBodyStructure": "Содержит стандартные зоны человеческого тела, описывающие группы органов, например, брюшная полость, средостение.",
        "NeoMkb10_level_01": "Первый уровень классификации МКБ-10.",
        "NeoMkb10_level_02": "Второй уровень классификации МКБ-10.",
        "NeoMkb10_level_03": "Третий уровень классификации МКБ-10.",
        "NeoMkb10_level_04": "Четвертый уровень классификации МКБ-10.",
        "NeoMkb10_level_05": "Пятый уровень классификации МКБ-10.",
        "NeoMkb10_level_06": "Шестой уровень классификации МКБ-10.",
        "NeoOrganStructure": "Содержит анатомические элементы органов, например, правая и левая доли щитовидной железы.",
        "NeoSymptomFeature": "Содержит симптомы или жалобы пациента.",
        "NeoTherapyFeature": "Содержит типы и виды лечения пациента, например, иммобилизация.",
        "NeoAnatomicalValue": "Содержит фактические значения свойств органов, например, усиленный кровоток.",
        "NeoInspectionValue": "Содержит результаты осмотра зон осмотра, например, чистые кожные покровы.",
        "NeoMedServiceValue": "Содержит конкретные параметры диагностических манипуляций, например, общий анализ крови или УЗИ молочных желез.",
        "NeoAnatomicalFeature": "Содержит параметризируемые свойства органов и систем, например, кровоток, структура, эхогенность.",
        "NeoInspectionFeature": "Содержит зоны физикального осмотра пациента, например, кожные покровы, слизистые.",
        "NeoMedServiceFeature": "Содержит все диагностические манипуляции, выполненные с пациентом, например, осмотр, УЗИ, анализ крови.",
        "NeoPatientDemographyValue": "Содержит значения демографических параметров.",
        "NeoPatientDemographyFeature": "Содержит демографические признаки человека, например, возраст, пол.",
        "NeoPatientAnthropometryValue": "Содержит значения антропометрических параметров.",
        "NeoPatientAnthropometryFeature": "Содержит антропометрические параметры человека, такие как рост, вес, индекс массы тела."
      }
    }
  },
  {
    "model": "secret_settings.dbstructure",
    "pk": 2,
    "fields": {
      "name": "hierarchy",
      "structure": {
        "NeoOrgan": null,
        "NeoDisease": null,
        "NeoPatient": null,
        "NeoProtocol": null,
        "NeoAnomality": "NeoOrganStructure",
        "NeoBodyFluids": null,
        "NeoSymptomValue": "NeoSymptomFeature",
        "NeoTherapyValue": "NeoTherapyFeature",
        "NeoBodyStructure": null,
        "NeoMkb10_level_01": null,
        "NeoMkb10_level_02": "NeoMkb10_level_01",
        "NeoMkb10_level_03": "NeoMkb10_level_02",
        "NeoMkb10_level_04": "NeoMkb10_level_03",
        "NeoMkb10_level_05": "NeoMkb10_level_04",
        "NeoMkb10_level_06": "NeoMkb10_level_05",
        "NeoOrganStructure": "NeoOrgan",
        "NeoSymptomFeature": null,
        "NeoTherapyFeature": null,
        "NeoAnatomicalValue": "NeoAnatomicalFeature",
        "NeoInspectionValue": "NeoInspectionFeature",
        "NeoMedServiceValue": "NeoMedServiceFeature",
        "NeoAnatomicalFeature": [
          "NeoOrgan",
          "NeoOrganStructure",
          "NeoAnomality"
        ],
        "NeoInspectionFeature": null,
        "NeoMedServiceFeature": null,
        "NeoPatientDemographyValue": "NeoPatientDemographyFeature",
        "NeoPatientDemographyFeature": null,
        "NeoPatientAnthropometryValue": "NeoPatientAnthropometryFeature",
        "NeoPatientAnthropometryFeature": null
      }
    }
  },
  {
    "model": "secret_settings.globalprocessingsettings",
    "pk": 1,
    "fields": {
      "is_active": true,
      "shifted_window": true,
      "unification": true,
      "rephrase": true
    }
  }
]
